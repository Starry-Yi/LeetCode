class Solution {
    public int checkWays(int[][] pairs) {
        int[] out = new int[501];
        int[] parent = new int[501];
        boolean[][] edge = new boolean[501][501];
        Set<Integer> set = new HashSet<>();
        int relationships = pairs.length; 
        for(int[] i : pairs){
            edge[i[0]][i[1]] = true;
            edge[i[1]][i[0]] = true;
            out[i[0]]++;
            out[i[1]]++;
            set.add(i[0]);
            set.add(i[1]);
        }
        List<Integer> list = new ArrayList<>(set);
        Collections.sort(list,(o1,o2)->(out[o2]-out[o1]));
        int amount = list.size();
        if(relationships < amount-1){
            return 0;
        }
        int root = list.get(0);
        parent[root] = -1;
        int curr;
        for(int i = 1 ; i < amount ; i++){
            curr = list.get(i);
            boolean findRelationship = false;
            for(int j = i-1 ; j >= 0 ; j--){
                if(edge[curr][list.get(j)]){
                    parent[curr] = list.get(j);
                    findRelationship = true;
                    break;
                }
            }
            if(!findRelationship){
                return 0;
            }
        }
        int rel = 0;
        int ans = 1;
        int p;
        int c;
        for(Integer i : list){
            c = i;
            while(c != root){
                p = parent[c];
                if(!edge[i][p]){
                    return 0;
                }
                if(out[i] == out[p]){
                    ans = 2;
                }
                rel++;
                c = p;
            }
        }
        if(rel < relationships){
            return 0;
        }
        return ans;
    }
}